/*
 css-fabric 
 scale  system pointless
*/
@use 'scale-vars';
$scale-config: scale-vars.$scale-config; 
// load scss config file
@use '../../_utils'; 

// load general config variables
$_cfg: utils.get_conf(); 

// read variables
$_has_dimensions_strict: map-get($_cfg, has_dimensions_strict);
$_has_dimensions_min: map-get($_cfg, has_dimensions_min);
$_has_dimensions_max: map-get($_cfg, has_dimensions_max);

// dimensions declaration
$scale_size: map-get($scale-config, scale_size);
$scale_props: map-get($scale-config, scale_props);
$scale_css_values: map-get($scale-config, scale_css_values);
$scale_shorthands: map-get($scale-config, scale_shorthands);
$scale_defined_steps: map-get($scale-config, scale_defined_steps);
$scale_defined_step_unit: map-get($scale-config, scale_defined_step_unit);
$scale_defined_step_size: map-get($scale-config, scale_defined_step_size);
$scale_grid_ratios: map-get($scale-config, scale_grid_ratios);

/// css dimensions rules builder
@mixin css_dimension_property_builder($scale_prop, $size_code, $size_value, $media_query_code) {
  //
  $scale_prop_short: map-get($scale_props, $scale_prop);

  //$property_name: if($media_query_code,#{$scale_prop_short}-#{$media_query_code}-#{$size_code},#{$scale_prop_short}-#{$size_code});
  /*  dimension : "-#{$size_code}" shorthand is #{$size_value} #{$scale_prop}*/
  $tag: if(
    $media_query_code,
    #{$scale_prop_short}-#{$media_query_code}-#{$size_code},
    #{$scale_prop_short}-#{$size_code}
  );
  .#{$tag} {
    #{$scale_prop}: $size_value;

    @if ($_has_dimensions_max) {
      &-max {
        max-#{$scale_prop}: $size_value;
      }
    }
    @if ($_has_dimensions_min) {
      &-min {
        min-#{$scale_prop}: $size_value;
      }
    }
    @if ($_has_dimensions_strict) {
      &-strict {
        #{$scale_prop}: $size_value;
        max-#{$scale_prop}: $size_value;
        min-#{$scale_prop}: $size_value;
      }
    }
  }
}

// loop on shorthands
@mixin play_shorthand_loop($scale_prop, $mq_size_key) {
  @each $scale_shorthand, $scale_shorthand_value in $scale_shorthands {
    @include css_dimension_property_builder(
      $scale_prop,
      $scale_shorthand,
      map-get($scale_shorthands, $scale_shorthand),
      $mq_size_key
    );
  }
}

// loop on dimensions
@mixin play_dimensions_loop($scale_prop, $mq_size_key) {
  // loop on dimensions
  @each $scale_css_value in $scale_css_values {
    @include css_dimension_property_builder($scale_prop, $scale_css_value, $scale_css_value, $mq_size_key);
  }
}

// loop on defined dimensions
// w-* h-*
// build ratio : w-n = n * $scale_defined_step_size
@mixin play_defined_dimensions_loop($scale_prop, $mq_size_key) {
  // loop on defined dimensions
  // @each $scale_defined_size in $scale_defined_steps {
  $loop_turn: 1;
  $multiplier: $scale_defined_step_size;

  @each $scale_defined_step in $scale_defined_steps { 

    $loop_turn: $loop_turn * $multiplier;

    @include css_dimension_property_builder(
      $scale_prop,  
      $scale_defined_step,
      $scale_defined_step + #{$scale_defined_step_unit},
      $mq_size_key
    );
  }
}

// loop on ratio dimensions
@mixin play_ratio_dimensions_loop($scale_prop, $mq_size_key) {
  // loop on ratio dimensions
  @each $dimensions_grid_ratio in $scale_grid_ratios {
    @for $z_value from 1 through $dimensions_grid_ratio {
      @include css_dimension_property_builder(
        $scale_prop,
        $z_value + "-" + $dimensions_grid_ratio,
        (($z_value / $dimensions_grid_ratio) * 100) +#{"%"},
        $mq_size_key
      );
    }
  }
}

@mixin buildScale($mq_size_key) {
  @each $scale_prop, $scale_prop_short in $scale_props {
    // loop on shorthands
    @include play_shorthand_loop($scale_prop, $mq_size_key);

    // loop on dimensions
    @include play_dimensions_loop($scale_prop, $mq_size_key);

    // loop on defined dimensions
    @include play_defined_dimensions_loop($scale_prop, $mq_size_key);

    // loop on ratio dimensions
    @include play_ratio_dimensions_loop($scale_prop, $mq_size_key);
  }
}

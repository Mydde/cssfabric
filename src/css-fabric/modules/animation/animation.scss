/*
 css-fabric 
 grid system 
*/ 
@use 'animation-vars';
$animation-config: animation-vars.$animation-config;

// load scss config file 
@use '../../_utils' as utils; 
// load general config variables 
$_cfg: utils.get_conf(); 
  
$fabric_attention_props: map-get($animation-config, attention_props);
$fabric_in_out_props: map-get($animation-config, in_out_props);

$vectorDirections: (up right bottom left);

  
  
// up down right left
@function getVectorPropertyObject($vectorDirection) {

    $move: '';
    $direction: '';

    $model: (up:(translation:translateY, direction: '-'),
            bottom:(translation:translateY, direction: '+'),
            right:(translation:translateX, direction: '+'),
            left:(translation:translateX, direction: '-'));

    $test: map-get($model, $vectorDirection);

    @return (translation:map-get($test, translation), direction:map-get($test, direction));

} 

@function draw ($vectorMove, $vectorDirection, $vectorValue) {

    @return (#{$vectorMove}(#{$vectorDirection}#{$vectorValue}));
}

//
@mixin debug($family, $vector, $corner) {

    $vectorMove: null;
    $cornerMove: null;

    $vectorProperty: getVectorPropertyObject($vector);

    $vectorMove: map-get($vectorProperty, translation); // 'translate' XY
    $vectorDirection: map-get($vectorProperty, direction); // + || -

    $val: draw($vectorMove, $vectorDirection, '10px');

    @if $corner {
        $cornerProperty: getVectorPropertyObject($corner);

        $cornerMove: map-get($cornerProperty, translation); // 'translate' XY
        $cornerDirection: map-get($cornerProperty, direction); // + || -

        $val: #{$val} draw($cornerMove, $cornerDirection, '10px');
        ;
    }

    $fabricClassName:'animate-'+$family+'-'+$vector+if($corner, '-'+$corner, null);

    @if $vectorMove !=$cornerMove {

        @keyframes #{$fabricClassName} {

            0% {
                transform: scale(1);
                opacity: 1;
            }

            30% {
                transform: #{$val} scale(0.7);
                opacity: 0.7;
            }

            100% {
                transform: #{$val} scale(0.7);
                opacity: 0.5;
            }
        }

        .#{$fabricClassName} {
            animation-name: #{$val};
        }
    }
}


// left right down up #{$anim_dir_more}
@each $animate_style in $fabric_in_out_props {

    $treatedDirections: ();

    @each $inOut in (In Out) {
        
        @each $vectorDirection in $vectorDirections {

            $treatedDirections: append($treatedDirections, $vectorDirection);
            //
            @include debug ($animate_style+$inOut, $vectorDirection, null);

            @each $vectorCornerDirection in $vectorDirections {

                $alreadyDone: index($treatedDirections, $vectorCornerDirection);

                @if $vectorCornerDirection !=$vectorDirection and not $alreadyDone {

                    @if $vectorDirection !=$vectorCornerDirection {
                        //
                        @include debug ($animate_style+$inOut, $vectorDirection, $vectorCornerDirection);
                    }
                }
            }

        }
    }

}

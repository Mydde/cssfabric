 /*
* css-fabric 
* color system
*/
@use "sass:map";
// load scss config file
@use '../../_utils';
// load general config variables
$_cfg: utils.get_conf();
// load local config variables
$_color: utils.get_conf_data(color);

// media queries sizes, in em  
$_media_quey_sizes: map-get($_cfg, media_quey_sizes);

// COLOR SCHEMES
$color_schemes: map-get($_color, color_schemes_props);

// COLOR PALETTE
$color_palette_props: map-get($_color, color_palette_props);

// GRAYS
$color_grays: map-get($_color, color_grays);
$gray_start: map-get($color_grays, gray_start);
$gray_end: map-get($color_grays, gray_end);
$gray_steps: map-get($color_grays, gray_steps); 


@mixin text-contrast($n) {
    $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
    $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

    @if abs($color-brightness) < ($light-color/2) { 
        color: white;
    }
 
    @else {
        color: black;
    }
}

$gray_schemes: (); 

@for $i from 1 through $gray_steps {
    $color: mix($gray_end, $gray_start, $i / $gray_steps * 100%);
    $gray_schemes: map.set($gray_schemes, #{$i*100}, $color);
}

@mixin fabric_colors($type, $tag_short, $mq_key) {
   $prop: '';

   $property_key: #{$tag_short}+if($mq_key, -#{$mq_key}, '');

   .#{$property_key} {

       @each $color_key,
       $color_prop in $type {

           &-#{$color_key} {
               @if $tag_short==color {
                   color: $color_prop;
               }

               @if $tag_short==bg {
                   background-color: $color_prop;
               }

               @if $tag_short=='bg-theme' {
                   @include text-contrast($color_prop); 
                   text-shadow: 0 0 2px $color_prop;
                   background-color: $color_prop;
               }
           }
       }
   }
}

@mixin buildColor($mq_size_key) {
   @each $key in color bg bg-theme {
       @include fabric_colors($color_schemes, $key, ($mq_size_key));
       @include fabric_colors($color_palette_props, $key, ($mq_size_key));
       @include fabric_colors($gray_schemes, $key,($mq_size_key));
   }
}


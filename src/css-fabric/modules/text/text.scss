/*
* css-fabric 
* text size and transform system
*/

// load scss config file
@use '../../_utils';
// load general config variables
$_cfg: utils.get_conf();
// load local config variables
$_text: utils.get_conf_data(text);

// read variables
// media queries sizes, in em  
$_media_quey_sizes: map-get($_cfg, media_quey_sizes);
//
$text_class_name: map-get($_cfg, text_class_name);
$text_class_name_short: map-get($_cfg, text_class_name_short);
$color_schemes: map-get($_cfg, color_schemes_props);
$color_palette_props: map-get($_cfg, color_palette_props);
$color_grays: map-get($_cfg, color_grays);

//
$font_sizes: map-get($_text, font_sizes);
$font_sizes_unit: map-get($_text, font_sizes_unit);
$font_sizes_h1_em: map-get($_text, font_sizes_h1_em);
$font_sizes_h_min_em: map-get($_text, font_sizes_h_min_em);

$text_transform: map-get($_text, text_transform);
$font_weights: map-get($_text, font_weights);

$text_align: map-get($_text, text_align);


$scale_props: ("width":"w", "height":"h");
$scale_grid_ratios: (8, 24);



/* css Hn text rules */
$h1_size: $font_sizes_h1_em;
$ratio: $h1_size/$font_sizes;
$ratio_max_min: $font_sizes_h1_em / $font_sizes_h_min_em;

@mixin fabric_text($tag_short) {

    .#{$tag_short} {

        @for $grid_size_value from 1 through $font_sizes {
            // 12em => 1em;
            $size: $grid_size_value * 1;
            $index: $font_sizes - $grid_size_value + 1;
            $font_size: $index * $ratio;

            &-h#{$size} {
                font-size: $font_size+em;
            }
        }

        @each $transform_key,
        $transform_prop in $text_transform {
            &-#{$transform_key} {
                text-transform: $transform_prop;
            }
        }

        @each $transform_key,
        $transform_prop in $font_weights {
            &-#{$transform_key} {
                font-weight: $transform_prop;
            }
        }

        @each $transform_key,
        $transform_prop in $text_align {
            &-#{$transform_key} {
                text-align: $transform_prop;
            }
        }

        // text color_schemes
        @each $color_key,
        $color_prop in $color_schemes {
            &-#{$color_key} {
                color: $color_prop;
            }
        }

        $gray_start: map-get($color_grays, gray_start);
        $gray_end: map-get($color_grays, gray_end);
        $gray_steps: map-get($color_grays, gray_steps);

        @for $i from 1 through $gray_steps {
            &-gray-#{$i*100} {
                color: mix( $gray_end,$gray_start, $i / $gray_steps * 100%);
            }
        }

    }
}

@include fabric_text($text_class_name_short);



// loop on responsive ratio dimensions
@each $mq_size_key,
$mq_size_value in $_media_quey_sizes {

    $property_key: #{$text_class_name_short}-#{$mq_size_key};

    @include utils.responsive_encloser($mq_size_value) {
        @include fabric_text($property_key);
    }
}

@use "sass:string";
@use "sass:map";
@use "sass:math";
@use "sass:color";

// load main fabric vars
@use 'modules/cssfabric-config' as cssfabric-config;

// link to fabric conf scss file, which often move ;)
@function get_fabric_conf($prop: null,$val: null) {
  @if not $prop {
    @return cssfabric-config.$cssfabric-config;
  }
  @if $prop and not $val {
    @return map-get(cssfabric-config.$cssfabric-config, $prop);
  }
  @if $val {
    $in: map-get(cssfabric-config.$cssfabric-config, $prop);
    @return map-get($in, $prop, $val);
  }
}

// css dimensions rules builder responsive
@mixin fabricResponsiveEncloser($mq_size_value, $mq_min_size_value: null) {
  // and (min-width: $mq_min_size_value + rem)
  // @debug $mq_size_value $mq_min_size_value;
  $type-width: if($mq_size_value==180, max, max);
  $width: if($mq_size_value==180, $mq_min_size_value, $mq_size_value);

  // @debug  (#{$type-width}-width: $width + rem) ;
  @media only screen and (#{$type-width}-width: $width + px) {
    @content;
  }
}

@mixin fabricAttributes($sep, $frag, $property, $value) {
  #{$sep + $frag} {
    #{$property}: #{$value};
  }
}

@mixin scssVarsToCssVars($module, $module-config) {
  /** 
  * cssfabric generated file
  * css vars for #{$module} 
  */
  @each $red, $rt in $module-config {
    // list map string
    @if (type_of($rt) == "string") {
      $key: #{$module}-#{$red};
      --cssfabric-#{$key}: #{$rt};
    }
    @if (type_of($rt) == "map") {
      @each $rtkey, $rtval in $rt {
        $type: type_of($rtval);
        $key: #{$module}-#{$red}-#{$rtkey};
        $compval: is-map; // #{string.slice(#{#ss($rtval)}, 4)};

        $comp: if($type== map or $type == list, #{$compval}, #{$rtval});

        --cssfabric-#{$key}: #{$comp};
      }
    }
    @if (type_of($rt) == "list") {
      $key: #{$module}-#{$red};
      --cssfabric-#{$key}: #{string.slice(#{#ss($rt)}, 4)};
    }
  }
}

@mixin alphaTize($key,$color,$ranges: (_:0.3,low:0.8,high:0.1)) {
  @each $range, $val in $ranges {
    $rg: if($range==_,'',-#{$range});
    #{$key}-alpha#{$rg} : #{color.change($color,$alpha:$val)};
  }
}

@function getGraySteps($steps, $gray-start, $gray-end) {
  $gray-schemes: ();

  @for $i from 0 through $steps {

    $color: mix($gray-end, $gray-start, math.div($i , $steps) * 100%);

    $gray-schemes: map.set($gray-schemes, #{($i+1) * 100}, $color);
  }

  @return $gray-schemes;
}

@function applyColorEffect($theme-level, $color) {
  $switch-named: map-get(
                  (
                          light: lighten($color, 15%),
                          lighter: lighten($color, 30%),
                          dark: darken($color, 10%),
                          darker: darken($color, 20%),
                          complement: complement($color),
                          invert: invert($color)
                  ),
                  $theme-level
  );

  @return $switch-named;
}

@function getColorPropertyType($fabric-tag) {
  /** get property for #{$fabric-tag} */
  @return map-get(
                  (
                          color: color,
                          text: color,
                          bg: background-color,
                          bg-themed: background-color,
                          border: border-color
                  ),
                  $fabric-tag
  );
}

@function getThemeLevels($declinations-config, $color_primary) {
  $out: ();
  // primary secondary tertiary
  @each $color-grade, $color-value in $declinations-config {
    $color: $color-value;
    $out: map.set($out, $color-grade, $color);
    @each $theme-level in (light lighter dark darker complement invert) {
      $new-theme-level: #{$color-grade}-#{$theme-level};
      $newColor: applyColorEffect($theme-level, $color);
      $out: map.set($out, $new-theme-level, $newColor);
    }
  }

  @return $out;
}

@function getBoxIterator($iterator, $unit-config,$_unit-size-config) {
  $out: ("_": "_");

  @for $grid_size_value from 1 through $iterator {
    $css_size_value: ($grid_size_value * $_unit-size-config) + $unit-config;
    $out: map.set($out, $grid_size_value, $css_size_value);
  }
  @return $out
}

@function getShadowIterator($factors,$box-shadows-steps) {
  $out: ();

  $v_fact: map-get($factors, v_fact);
  $h_fact: map-get($factors, h_fact);

  $v_fact_2: map-get($factors, v_fact_2);
  $h_fact_2: map-get($factors, h_fact_2);

  $acc: 1;

  @for $shadows_step from 1 through $box-shadows-steps {
    $acc: $acc * 2;
    $v: $shadows_step * 2;

    $v_val: math.div($acc, $v_fact);
    $h_val: math.div($acc, $h_fact);

    $v_val_2: math.div($acc, $v_fact_2);
    $h_val_2: math.div($acc, $h_fact_2);

    $out: map.set($out, $acc, #{$v_val} + #{$h_val});
  }

  @return $out;
}

@function cssDimensionPropertyBuilder($scale_prop,$dimensions_grid_ratio) {
  $out: ();

  @for $z_value from 1 through $dimensions_grid_ratio {
    $key: $z_value + "-" + $dimensions_grid_ratio;
    $val: (math.div($z_value , $dimensions_grid_ratio) * 100) +#{"%"};

    $out: map.set($out, $key, $val);
  }

  @return $out
}

@function getObjectKeys($object) {
  $out: ();
  @each $key, $value in $object {
    $out: append($out, $key);
  }

  @return $out;
}

@function getObjectValues($object) {
  @return $object;
}

@function getObjectKeyValues($object) {
  @return $object;
}

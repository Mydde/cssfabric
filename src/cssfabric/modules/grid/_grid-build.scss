// load scss config file
@use '../../_utils';
@use '../cssfabric-config';
@use 'grid-vars';

$grid-config: grid-vars.$grid-config;
$cssfabric-config: cssfabric-config.$cssfabric-config;

$sep: map-get($cssfabric-config, sep);
// read variables
$grid-code: map-get($grid-config, moduleNameShort);
$grid-h: map-get($grid-config, horCode);
$grid-v: map-get($grid-config, vertCode);

$cssProps: map-get($grid-config, cssProps);
$cssItemsProps: map-get($grid-config, cssItemsProps);

$gridFullWidth: map-get($grid-config, gridFullWidth);

$grow-shrink-steps: map-get($grid-config, grow-shrink-steps);

$grid-max-cols: map-get($grid-config, grid-max-cols);
$grid-max-rows: map-get($grid-config, grid-max-rows);

$grid-code-sep: #{$grid-code}#{$sep};

@mixin makeGrid($mqKey) {
  $prefix: if($mqKey, #{$grid-code}-#{$mqKey}, #{$grid-code});
  $h_prop: #{$prefix}#{$sep}#{$grid-h};
  $v_prop: #{$prefix}#{$sep}#{$grid-v};

  .#{$grid-code} {
    display: grid;
    &-auto-flow-cols {
      grid-auto-flow: column;
    }
    &-auto-cols-auto {
      grid-auto-columns: auto;
    }
    &-auto-cols-min	 {
      grid-auto-columns: min-content;
    }
    &-auto-cols-max {
      grid-auto-columns: max-content;
    }
    &-auto-cols {
      grid-auto-columns: minmax(0, 1fr);
    }

    &-auto-flow-rows {
      grid-auto-flow: row;
    }
    &-auto-rows-auto {
      grid-auto-rows: auto;
    }
    &-auto-rows-min	 {
      grid-auto-rows: min-content;
    }
    &-auto-rows-max {
      grid-auto-rows: max-content;
    }
    &-auto-rows {
      grid-auto-rows: minmax(0, 1fr);
    }


  }

  .#{$grid-code-sep}inline {
    display: inline-grid;
  }
  /* template-columns */
  @for $col-row from 1 through $grid-max-cols {
    .#{$grid-code}-cols-#{$col-row} {
      grid-template-columns: repeat(#{$col-row}, minmax(0, 1fr));
    }
  }
  /* template-rows */
  @for $col-row from 1 through $grid-max-rows {
    .#{$grid-code}-rows-#{$col-row} {
      grid-template-rows: repeat(#{$col-row}, minmax(0, 1fr));
    }
  }
}

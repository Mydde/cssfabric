// load scss config file
@use '../../_utils';
@use '../cssfabric-vars' as cssfabric-vars;
@use 'grid-vars';

$grid-config: grid-vars.$grid-config;
$cssfabric-config: cssfabric-vars.$cssfabric-config;

$sep: map-get($cssfabric-config, sep);
// read variables
$grid-code: map-get($grid-config, moduleNameShort);
$grid-h: map-get($grid-config, horCode);
$grid-v: map-get($grid-config, vertCode);

$cssProps: map-get($grid-config, cssProps);
$cssItemsProps: map-get($grid-config, cssItemsProps);

$gridFullWidth: map-get($grid-config, gridFullWidth);

$grow-shrink-steps: map-get($grid-config, grow-shrink-steps);

$grid-code-sep: #{$grid-code}#{$sep};

@mixin makeGrid($mqKey) {
  $prefix: if($mqKey, #{$grid-code}-#{$mqKey}, #{$grid-code});
  $h_prop: #{$prefix}#{$sep}#{$grid-h};
  $v_prop: #{$prefix}#{$sep}#{$grid-v};

  %flex {
    display: flex;
  }

  .#{$h_prop} {
    display: flex;
    flex-direction: row;

    & > .#{$grid-code-sep}#{$gridFullWidth} {
      flex: 1 1 0;
      width: 100%;
      max-width: 100%;
    }

    .align-middle, .#{$grid-code-sep}align-middle {
      align-items: center;
    }
  }

  .#{$v_prop} {
    display: flex;
    flex-direction: column;

    & > .#{$grid-code-sep}#{$gridFullWidth} {
      flex: 1 1 0;
      max-height: 100%;
    }

    .align-middle, .#{$grid-code-sep}align-middle {
      justify-content: center;
    }
  }

  .#{$h_prop},
  .#{$v_prop} {
    box-sizing: border-box;

    & > * {
      box-sizing: border-box;
    }

    & > *:not(.#{$grid-code-sep}#{$gridFullWidth}) {
      flex: 0 0 auto;
    }

    &.#{$grid-code-sep}inline {
      display: inline-flex;
    }

    @for $i from 1 through $grow-shrink-steps {
      &.#{$grid-code-sep}grow#{$sep}#{$i} {
        flex-grow: $i;
      }

      &.#{$grid-code-sep}shrink#{$sep}#{$i} {
        flex-shrink: $i;
      }
    }
  }

  /** raw css properties distribution */
  .#{$h_prop},
  .#{$v_prop} {
    // wrap rules
    &.#{$grid-code} {
      @each $fabricRule, $value in map-get($cssProps, flexWrap) {
        @include utils.fabricAttributes('&'+$sep, $fabricRule, 'flex-wrap', $value);
      }
    }

    // justify content rules */
    &.just , .grid-justify {
      @each $fabricRule, $value in map-get($cssProps, grid-justify) {
        @include utils.fabricAttributes('&'+$sep, $fabricRule, 'justify-content', $value);
      }
    }

    // align-items rules */
    &.items , .grid-items{
      @each $fabricRule, $value in map-get($cssProps, grid-items) {
        @include utils.fabricAttributes('&'+$sep, $fabricRule, 'align-items', $value);
      }
    }

    // align-content rules */
    &.content, .grid-content {
      @each $fabricRule, $value in map-get($cssProps, grid-content) {
        $tag: content#{$sep}start;
        @include utils.fabricAttributes('&'+$sep, $fabricRule, 'align-content', $value);
      }
    }

    // align-self rules for children */
    & .self {
      @each $fabricRule, $value in map-get($cssItemsProps, self) {
        @include utils.fabricAttributes('&-', $fabricRule, 'align-self', $value);
      }
    }
  }


}

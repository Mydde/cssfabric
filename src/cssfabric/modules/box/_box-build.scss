@use "sass:map";
@use '../../_utils';
@use "../cssfabric-vars";
@use "box-vars" as box;

$box-config: box.$box-config;
$box-docs: box.$box-docs;

$cssProps: map-get($box-config, cssProps);
$box-border-shorthands: map-get($cssProps, borderShorthands);
$box-position-props: map-get($cssProps, positionProps);
$box-display-props: map-get($cssProps, displayProps);

$box-unit-config: map-get($box-config, unit-config);
$box-border-unit-config: map-get($box-config, border-unit-config);
$box-unit-size-config: map-get($box-config, unit-size-config);
$box-unit-border-size-config: map-get($box-config, unit-border-size-config);
$box-sizes-config: map-get($box-config, sizes-config);
$box-border-sizes-px-config: map-get($box-config, border-sizes-px-config);

$box-position-shorthand-config: map-get($box-config, position-shorthand-config) !default;
$box-display-shorthand-config: map-get($box-config, display-shorthand-config) !default;
$box-shadow-shorthand-config: map-get($box-config, shadow-shorthand-config) !default;

$box-border-shorthand-config: map-get($box-config, border-shorthand-config) !default;
$box-padding-shorthand-config: map-get($box-config, padding-shorthand-config) !default;
$box-margin-shorthand-config: map-get($box-config, margin-shorthand-config) !default;

$box-shadows-steps: map-get($box-config, shadows-steps) !default;
$box-shadows-step-multiplier: map-get($box-config, shadows-step_multiplier) !default;

$css-shorthands: (
  border: $box-border-shorthand-config,
  padding: $box-padding-shorthand-config,
  margin: $box-margin-shorthand-config
);

// adding {border}-{r} shorthand css rule for .{border}-{r}-1
@function raw_size_tag_rule($condition) {
  @if ($condition==1) {
    @return "&,";
  } @else {
    @return "";
  }
}

@function write-box-rule($_args) {
  $rule_value: map-get($_args, rule_value);
  $rule_type: map-get($_args, rule_type);
  $css_prop: map-get($_args, css_prop);

  $computed_value: "";

  // simply write method: value
  @if $rule_type== "position_display" {
    $computed_value: $rule_value;
  }

  // complex write method: 1px value
  @if ($css_prop== "padding" or $css_prop== "margin") {
    $computed_value: $rule_value;
  }

  // complex write method: 1px value
  @if ($css_prop== "border") {
    $computed_value: $rule_value + " solid #ccc";
  }

  @return $computed_value;
}

// prop : ...top bottom for  border | margin | padding
@mixin fabric-pmb($fabric_box_position_prop, $fabric_box_position_prop_short) {
  @each $fabric_box_pmb_side_shorthand, $rule in $box-border-shorthands {
    $iterator: if($fabric_box_position_prop== border, $box-border-sizes-px-config, $box-sizes-config);
    $unit: if($fabric_box_position_prop== border, $box-border-unit-config, $box-unit-config);
    // box_unit_border_size
    $unit_size: if($fabric_box_position_prop== border, $box-unit-border-size-config, $box-unit-size-config);

    // css property name
    // remove _ is present
    $shorthand: if($fabric_box_pmb_side_shorthand== "_", "", -#{$fabric_box_pmb_side_shorthand});

    .#{$fabric_box_position_prop_short}#{$shorthand} {
      // todo use utils.getBoxIterator
      @for $grid_size_value from 1 through $iterator {
        $css_size_value: ($grid_size_value * $unit_size) + $unit;
        // css property name is aggregated with size value $i
        #{raw_size_tag_rule($grid_size_value)} &-#{$grid_size_value} {
          @if length($rule) ==4 {
            $_args: (
              rule_value: $css_size_value,
              rule_type: "pmb",
              css_prop: $fabric_box_position_prop
            );

            #{$fabric_box_position_prop}: write-box-rule($_args);
          } @else {
            @each $grid_size_value in $rule {
              $_args: (
                rule_value: $css_size_value,
                rule_type: "pmb",
                css_prop: $fabric_box_position_prop
              );

              #{$fabric_box_position_prop}-#{$grid_size_value}: write-box-rule($_args);
            }
          }
        }
      }
    }
  }
}

@mixin fabric_property($_args) {
  $css_prop: map-get($_args, css_prop);
  $css_prop_short: map-get($_args, css_prop_short);
  $fabric_key_shorthands: map-get($_args, fabric_key_shorthands);

  @each $fabric_key_shorthand, $fabric_box_prop in $fabric_key_shorthands {
    // css property
    $prop_re: #{$css_prop_short}-#{$fabric_key_shorthand};

    .#{$prop_re} {
      $_args: (
        rule_value: $fabric_box_prop,
        rule_type: map-get($_args, write_rule),
        css_prop: map-get($_args, css_prop)
      );

      #{$css_prop}: write-box-rule($_args);
    }
  }
}

// stupid, make three calls
// pmb as padding margin border property
@mixin padding-margin-border($mq_key) {
  @each $box_pmb_shorthand_value, $box_pmb_shorthand in $css-shorthands {
    $shorthand: if($mq_key, #{$box_pmb_shorthand}-#{$mq_key}, #{$box_pmb_shorthand});

    @include fabric-pmb($box_pmb_shorthand_value, $shorthand);
  }
}

// display property
@mixin display($mq_key) {

  $shorthand: if($mq_key, #{$box-display-shorthand-config}-#{$mq_key}, #{$box-display-shorthand-config});

  @include fabric_property(
    (
      css_prop: "display",
      css_prop_short: $shorthand,
      fabric_key_shorthands: $box-display-props,
      write_rule: "position_display"
    )
  );
}

// position property
@mixin position($mq_key) {
  $shorthand: if($mq_key, #{$box-position-shorthand-config}-#{$mq_key}, #{$box-position-shorthand-config});

  @include fabric_property(
    (
      css_prop: "position",
      css_prop_short: $shorthand,
      fabric_key_shorthands: $box-position-props,
      write_rule: "position_display"
    )
  );
}

@mixin shadows($mq_key) {
  $shorthand: if($mq_key, #{$box-shadow-shorthand-config}-#{$mq_key}, #{$box-shadow-shorthand-config});

  $v_fact: 2.4;
  $h_fact: 1.16;

  $v_fact_2: 13.1;
  $h_fact_2: 4.3;

  $acc: 1;

  @for $shadows_step from 1 through $box-shadows-steps {
    $acc: $acc * 2;
    $v: $shadows_step * 2;

    $v_val: $acc / $v_fact;
    $h_val: $acc / $h_fact;

    $v_val_2: $acc / $v_fact_2;
    $h_val_2: $acc / $h_fact_2;

    .#{$shorthand}-#{$acc} {
      box-shadow: 0 #{$v_val}px #{$h_val}px 0 rgb(0 0 0 / 15%), 0 #{$v_val_2}px #{$h_val_2}px 0 rgb(0 0 0 / 10%);
    }
  }
}

@mixin buildBox($mq_key: null) {
  @include padding-margin-border($mq_key);
  @include display($mq_key);
  @include position($mq_key);
  @include shadows($mq_key);
}

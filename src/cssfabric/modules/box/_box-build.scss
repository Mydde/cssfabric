@use "sass:map";
@use "sass:math";
@use '../../_utils';
@use "../cssfabric-config";
@use "box-vars" as box;

$fabric-config: cssfabric-config.$cssfabric-config;
$box-config: box.$box-config;
$box-docs: box.$box-docs;

$box-border-shorthands: box.$box-border-shorthands;
$box-position-props: box.$box-position-shorthands;
$box-display-props: box.$box-display-shorthands;

$box-unit-config: box.$box-unit-config;
$box-border-unit-config: box.$box-border-unit-config;
$box-unit-size-config: box.$box-unit-size-config;
$box-unit-border-size-config: box.$box-unit-border-size-config;
$box-sizes-config: box.$box-sizes-config;
$box-border-sizes-px-config: box.$box-sizes-border-config;

$box-position-shorthand-config: cssfabric-config.$box-position-shorthand !default;
$box-display-shorthand-config: cssfabric-config.$box-display-shorthand !default;
$box-shadow-shorthand-config: cssfabric-config.$box-shadow-shorthand !default;

$box-border-shorthand-config: cssfabric-config.$box-border-shorthand !default;
$box-padding-shorthand-config: cssfabric-config.$box-padding-shorthand !default;
$box-margin-shorthand-config: cssfabric-config.$box-margin-shorthand !default;

$box-shadows-steps: box.$box-shadows-steps !default;
$box-shadows-step-multiplier: box.$box-shadows-step-multiplier !default;

$box-radius: cssfabric-config.$box-radius;
$box-unit-presets: cssfabric-config.$box-unit-presets;

$densities-ratios : cssfabric-config.$densities-ratios;

// adding {border}-{r} shorthand css rule for .{border}-{r}-1
@function raw_size_tag_rule($condition) {
  @if ($condition==1) {
    @return "&,";
  } @else {
    @return "";
  }
}

// support ratios
// for paddings margins positions
@mixin pmbCssVars() {
  $iterator: $box-sizes-config;
  @for $grid_size_value from 0 through $iterator {
    $css_size_value: ($grid_size_value * $box-unit-size-config) + $box-unit-config;
    --box-density-#{$grid_size_value} : #{$css_size_value};
  }

  // presets
  @each $preset, $preset-value in $box-unit-presets{
    $value: ($preset-value * $box-unit-size-config) + $box-unit-config;
    --box-density-preset-#{$preset}: #{$value};
  }

  // radius
  @each $radius, $value in $box-radius{
    @debug #{$value};
    --radius-#{$radius}: #{$value};
  }

  // $ratios: tiny small medium large full
  @each $ratio, $val in $densities-ratios {
    [density=#{$ratio}] {
      @for $grid_size_value from 0 through $iterator {
        $css_size_value: (($grid_size_value * $box-unit-size-config)*$val) + $box-unit-config;
        --box-density-#{$grid_size_value} : #{$css_size_value};
      }
      // presets
      @each $preset, $preset-value in $box-unit-presets{
        $value: (($preset-value * $box-unit-size-config)*$val) + $box-unit-config;
        --box-density-preset-#{$preset}: #{$value};
      }
    }
  }
}

//  border
@mixin fabric-pmb($fabric_box_position_prop, $fabric_box_position_prop_short) {
  @each $fabric_box_pmb_side_shorthand, $rule in $box-border-shorthands {

    // remove _ if present
    $shorthand: if($fabric_box_pmb_side_shorthand== "_", "", -#{$fabric_box_pmb_side_shorthand});

    .#{$fabric_box_position_prop_short}#{$shorthand} {

      @for $grid_size_value from 1 through $box-border-sizes-px-config {
        $css_size_value: ($grid_size_value * $box-unit-border-size-config) + $box-border-unit-config;
        // css property name is aggregated with size value $i

        $computed_value: $css_size_value + " solid var(--theme-color-border)";

        #{raw_size_tag_rule($grid_size_value)} &-#{$grid_size_value} {
          @if length($rule) == 4 {
            #{$fabric_box_position_prop}: #{$computed_value};
          } @else {

            @each $rule_value in $rule {
              #{$fabric_box_position_prop}-#{$rule_value}: #{$computed_value};
            }
          }
        }
      }
    }
  }
}

// prop : ... margin | padding
@mixin fabric-pm($fabric_box_position_prop, $fabric_box_position_prop_short) {
  @each $fabric_box_pmb_side_shorthand, $rule in $box-border-shorthands {

    $shorthand: if($fabric_box_pmb_side_shorthand== "_", "", -#{$fabric_box_pmb_side_shorthand});

    .#{$fabric_box_position_prop_short}#{$shorthand} {

      // presets
      @each $preset, $preset-value in $box-unit-presets{
        .#{$fabric_box_position_prop_short}#{$shorthand}-#{$preset}{
          #{$fabric_box_position_prop}: var(--box-density-preset-#{$preset});
        }
      }

      @for $grid_size_value from 1 through $box-sizes-config {
        $css_size_value: ($grid_size_value * $box-unit-size-config) + $box-unit-config;
        // css property name is aggregated with size value $i

        $computed_value: var(--box-density-#{$grid_size_value});

        #{raw_size_tag_rule($grid_size_value)} &-#{$grid_size_value} {
          @if length($rule) == 4 {
            #{$fabric_box_position_prop}: #{$computed_value};
          } @else {
            @each $rule_value in $rule {
              #{$fabric_box_position_prop}-#{$rule_value}: #{$computed_value};
            }
          }
        }
      }
    }
  }
}

// pmb as padding margin border property
// padding-tiny padding-small padding
@mixin padding-margin-border($mq_key) {

  $shorthand: if($mq_key, #{$box-margin-shorthand-config}-#{$mq_key}, #{$box-margin-shorthand-config});
  @include fabric-pm(margin, $shorthand);

  $shorthand: if($mq_key, #{$box-padding-shorthand-config}-#{$mq_key}, #{$box-padding-shorthand-config});
  @include fabric-pm(padding, $shorthand);

  $shorthand: if($mq_key, #{$box-border-shorthand-config}-#{$mq_key}, #{$box-border-shorthand-config});
  @include fabric-pmb(border, $shorthand);

}

// radius
@mixin radius($mq_key) {
  $shorthand: if($mq_key, radius-#{$mq_key}, radius);

  /*radius*/
  @each $radius, $value in $box-radius {
    .#{$shorthand}-#{$radius} {
      border-radius: #{$value};

      &-t {
        border-top-left-radius: #{$value};
        border-top-right-radius: #{$value}
      }

      &-b {
        border-bottom-left-radius: #{$value};
        border-bottom-right-radius: #{$value}
      }

      &-l {
        border-top-left-radius: #{$value};
        border-bottom-left-radius: #{$value}
      }

      &-r {
        border-top-right-radius: #{$value};
        border-bottom-right-radius: #{$value}
      }
    }
  }
}

// placement property -- top-0/8
@mixin placement($mq_key) {
  $shorthand: if($mq_key, #{$mq_key}-, '');
  $places: (top, right, bottom, left);

  /*placement*/
  @each $place in $places {
    @for $size from 0 through 8 {
      .#{$place}-#{$shorthand}#{$size} {
        #{$place}: var(--box-density-#{$size});
      }
    }
  }
}

// display property
@mixin display($mq_key) {

  $shorthand: if($mq_key, #{$box-display-shorthand-config}-#{$mq_key}, #{$box-display-shorthand-config});

  @each $css-shorthand, $css-value in $box-display-props {
    // css property
    $prop_re: #{$shorthand}-#{$css-shorthand};

    .#{$prop_re} {
      display: $css-value;
    }
  }
}

// position property
@mixin position($mq_key) {
  $shorthand: if($mq_key, #{$box-position-shorthand-config}-#{$mq_key}, #{$box-position-shorthand-config});

  @each $css-shorthand, $css-value in $box-position-props {
    // css property
    $prop_re: #{$shorthand}-#{$css-shorthand};

    .#{$prop_re} {
      position: $css-value;
      // if sticky
      @if sticky == $css-value {
        top: 0;
        margin-top: 0;
      }
    }
  }
}

@function buildShadowsValues($shadows_step:0,$shadow-color: null) {
  $v_fact: 2.4;
  $h_fact: 1.16;

  $v_fact_2: 13.1;
  $h_fact_2: 4.3;

  $acc: 1;

  $acc: $acc * $shadows_step * 2;
  $v: $shadows_step * 2;

  $v_val: math.div($acc, $v_fact);
  $h_val: math.div($acc, $h_fact);

  $v_val_2: math.div($acc, $v_fact_2);
  $h_val_2: math.div($acc, $h_fact_2);

  @return 0 #{$v_val}px #{$h_val}px 0 rgb(0 0 0 / 15%), 0 #{$v_val_2}px #{$h_val_2}px 0 rgb(0 0 0 / 10%);
}

@mixin shadows($mq_key) {
  $shorthand: if($mq_key, #{$box-shadow-shorthand-config}-#{$mq_key}, #{$box-shadow-shorthand-config});

  @for $shadows_step from 1 through $box-shadows-steps {

    .#{$shorthand}-#{$shadows_step} {
      box-shadow: var(--box-#{$shorthand}-#{$shadows_step});
    }
  }
}

// css vars rendered in :root
@mixin shadowsCssVars($mq_key:null) {
  $shorthand: if($mq_key, #{$box-shadow-shorthand-config}-#{$mq_key}, #{$box-shadow-shorthand-config});

  @for $shadows_step from 1 through $box-shadows-steps {
    --box-#{$shorthand}-#{$shadows_step}: #{buildShadowsValues($shadows_step)};
  }
}

@mixin buildBox($mq_key: null) {
  @include padding-margin-border($mq_key);
  @include display($mq_key);
  @include position($mq_key);
  @include placement($mq_key);
  @include radius($mq_key);
  @include shadows($mq_key);
}

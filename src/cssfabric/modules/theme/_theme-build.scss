@use "../../_utils";
@use "sass:color";
@use "theme-vars";

@import "theme-vars";
@import "../cssfabric-config";

// COLOR THEME
$moduleNameShort: map-get($theme-config, moduleNameShort);
// 
$theme-levels: map-get($theme-config, theme-level-config);
$theme-properties-apply-config: map-get($theme-config, theme-properties-apply-config);


$declinations-config: map-get($theme-config, declinations-config);

@mixin fabric_theme($mq_size_key: null) {
  // loop on each color grades primary secondary tertiary
  @each $color-grade in $declinations-config {
    // text, bg, border
    @each $text-or-bg-or-border in $theme-properties-apply-config {
      $property_key: if($mq_size_key, #{$text-or-bg-or-border}-#{$mq_size_key}, #{$text-or-bg-or-border});
      // font-size border-color background-color
      $switch-tag-type: utils.getColorPropertyType($text-or-bg-or-border);

      .#{$moduleNameShort}-#{$property_key}-#{$color-grade} {
        #{$switch-tag-type}: var(--theme-color-#{$color-grade});
        //  light lighter dark ...
        @each $theme-level in $theme-levels {
          $newColor: var(--theme-color-#{$color-grade}-#{$theme-level});

          @include utils.fabricAttributes("&-", $theme-level, #{$switch-tag-type}, $newColor);
        }
      }
    }
  }
  .theme-text-color, .theme-foreground-color {
    color: var(--theme-color-text);
  }

  .theme-foreground-color-alpha {
    color: var(--theme-color-foreground-alpha);
  }
  .theme-foreground-color-alpha-low {
    color: var(--theme-color-foreground-alpha-low);
  }
  .theme-foreground-color-alpha-high {
    color: var(--theme-color-foreground-alpha-high);
  }

  .theme-bg{
    background-color: var(--theme-color-background);
  }
  .theme-bg-alpha{
    background-color: var(--theme-color-background-alpha);
  }
  .theme-bg-alpha-low{
    background-color: var(--theme-color-background-alpha-low);
  }
  .theme-bg-alpha-high{
    background-color: var(--theme-color-background-alpha-high);
  }

  .theme-bg-paper{
    background-color: var(--theme-color-paper);
  }

  .theme-bg-paper-alpha{
    background-color: var(--theme-color-paper-alpha);
  }

  .theme-bg-paper-alpha-low{
    background-color: var(--theme-color-paper-alpha-low);
  }

  .theme-bg-paper-alpha-high{
    background-color: var(--theme-color-paper-alpha-high);
  }

}

@mixin themeBaseVars($theme-color-foreground,$theme-color-background,$theme-color-paper) {
  /* theme base colors*/
  --theme-color-text: #{$theme-color-foreground};
  --theme-color-foreground: #{$theme-color-foreground};

  @include utils.alphaTize(--theme-color-foreground, $theme-color-foreground);
  --theme-color-background: #{$theme-color-background};
  @include utils.alphaTize(--theme-color-background, $theme-color-background);
  --theme-color-paper: #{$theme-color-paper};
  @include utils.alphaTize(--theme-color-paper, $theme-color-paper);
}

 /* primary,secondary with alphas */
@mixin themeCssVars($theme-color-primary,$theme-color-secondary,$theme-color-tertiary) {

  /* theme primary colors*/
  --theme-color-primary: #{$theme-color-primary};
  @each $theme-level in $theme-levels {
    --theme-color-primary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$theme-color-primary)};
  }

  --theme-color-primary-alpha-low: #{color.change($theme-color-primary,$alpha:0.8)};
  --theme-color-primary-alpha: #{color.change($theme-color-primary,$alpha:0.3)};
  --theme-color-primary-alpha-high: #{color.change($theme-color-primary,$alpha:0.1)};

  /* theme secondary colors*/
  --theme-color-secondary: #{$theme-color-secondary};
  @each $theme-level in $theme-levels {
    --theme-color-secondary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$theme-color-secondary)};
  }
  --theme-color-secondary-alpha-low: #{color.change($theme-color-secondary,$alpha:0.8)};
  --theme-color-secondary-alpha: #{color.change($theme-color-secondary,$alpha:0.3)};
  --theme-color-secondary-alpha-high: #{color.change($theme-color-secondary,$alpha:0.1)};

  /* theme tertiary colors*/
  --theme-color-tertiary: #{$theme-color-tertiary};
  @each $theme-level in $theme-levels {
    --theme-color-tertiary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$theme-color-tertiary)};
  }
  --theme-color-tertiary-alpha-low: #{color.change($theme-color-tertiary,$alpha:0.8)};
  --theme-color-tertiary-alpha: #{color.change($theme-color-tertiary,$alpha:0.3)};
  --theme-color-tertiary-alpha-high: #{color.change($theme-color-tertiary,$alpha:0.1)};
}

@mixin buildTheme($mq_size_key: null) {

  @include fabric_theme($mq_size_key);
}

@use 'theme-vars';
@use "../cssfabric-vars";
@use '../../_utils';

$theme-config: theme-vars.$theme-config;

// COLOR THEME
$moduleNameShort: map-get($theme-config, moduleNameShort);
//
$color-themes: map-get($theme-config, color-default-config);
$theme-levels: map-get($theme-config, theme-level-config);
$theme-properties-apply-config: map-get($theme-config, theme-properties-apply-config);

$color-primary: map-get($color-themes, primary);


$declinations-config: map-get($theme-config, declinations-config);

@mixin fabric_theme($mq_size_key: null) {
  //
  @each $color-grade in $declinations-config {

    $switch-color-grad: utils.themeDeclinationColors($color-grade, $color-primary);

    @each $text-or-bg-or-border in $theme-properties-apply-config {

      $property_key: if($mq_size_key, #{$text-or-bg-or-border}-#{$mq_size_key}, #{$text-or-bg-or-border});

      $switch-tag-type: utils.getColorPropertyType($text-or-bg-or-border);

      .#{$moduleNameShort}-#{$property_key}-#{$color-grade} {
        #{$switch-tag-type}: #{$switch-color-grad};

        @each $theme-level in $theme-levels {

          $newColor: utils.applyColorEffect($theme-level, $switch-color-grad);

          @include utils.fabricAttributes("&-", $theme-level, #{$switch-tag-type}, $newColor);
        }
      }
    }
  }
}

@mixin buildTheme($mq_size_key: null) {
  @include fabric_theme($mq_size_key);
}

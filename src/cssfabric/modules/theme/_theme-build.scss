@use "theme-vars";
@use "../cssfabric-config";
@use "../../_utils";
@use "sass:color";

$config: cssfabric-config.$cssfabric-config;
$theme-config: theme-vars.$theme-config;

// COLOR THEME
$moduleNameShort: map-get($theme-config, moduleNameShort);
//
$color-themes: map-get($theme-config, color-default-config);
$theme-levels: map-get($theme-config, theme-level-config);
$theme-properties-apply-config: map-get($theme-config, theme-properties-apply-config);

$color-primary: map-get($color-themes, primary);
$color-secondary: map-get($color-themes, secondary);
$color-tertiary: map-get($color-themes, tertiary);

$declinations-config: map-get($theme-config, declinations-config);

$themes: map-get($config, themes) !default;
$theme-light: map-get($themes, light) !default;
$theme-dark: map-get($themes, dark) !default;

@mixin fabric_theme($mq_size_key: null) {
  // loop on each color grades primary secondary tertiary
  @each $color-grade in $declinations-config {
    // text, bg, border
    @each $text-or-bg-or-border in $theme-properties-apply-config {
      $property_key: if($mq_size_key, #{$text-or-bg-or-border}-#{$mq_size_key}, #{$text-or-bg-or-border});
      // font-size border-color background-color
      $switch-tag-type: utils.getColorPropertyType($text-or-bg-or-border);

      .#{$moduleNameShort}-#{$property_key}-#{$color-grade} {
        #{$switch-tag-type}: var(--theme-color-#{$color-grade});
        //  light lighter dark ...
        @each $theme-level in $theme-levels {
          $newColor: var(--theme-color-#{$color-grade}-#{$theme-level});

          @include utils.fabricAttributes("&-", $theme-level, #{$switch-tag-type}, $newColor);
        }
      }
    }
  }
}

@mixin themeBaseVars($theme:$theme-light) {
  /* theme base colors*/
  --theme-color-text: #{map-get($theme, foreground)};
  --theme-color-foreground: #{map-get($theme, foreground)};
  @include utils.alphaTize(--theme-color-foreground, map-get($theme, foreground));
  --theme-color-background: #{map-get($theme, background)};
  @include utils.alphaTize(--theme-color-background, map-get($theme, foreground));
  --theme-color-paper: #{map-get($theme-light, paper)};
  @include utils.alphaTize(--theme-color-paper, map-get($theme, paper));
}


@mixin themeCssVars() {
  /* theme primary colors*/
  --theme-color-primary: #{$color-primary};
  @each $theme-level in $theme-levels {
    --theme-color-primary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$color-primary)};
  }

  --theme-color-primary-alpha-low: #{color.change($color-primary,$alpha:0.8)};
  --theme-color-primary-alpha: #{color.change($color-primary,$alpha:0.3)};
  --theme-color-primary-alpha-high: #{color.change($color-primary,$alpha:0.1)};

  /* theme secondary colors*/
  --theme-color-secondary: #{$color-secondary};
  @each $theme-level in $theme-levels {
    --theme-color-secondary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$color-secondary)};
  }
  --theme-color-secondary-alpha-low: #{color.change($color-secondary,$alpha:0.8)};
  --theme-color-secondary-alpha: #{color.change($color-secondary,$alpha:0.3)};
  --theme-color-secondary-alpha-high: #{color.change($color-secondary,$alpha:0.1)};

  /* theme tertiary colors*/
  --theme-color-tertiary: #{$color-tertiary};
  @each $theme-level in $theme-levels {
    --theme-color-tertiary-#{$theme-level}: #{utils.applyColorEffect($theme-level,$color-tertiary)};
  }
  --theme-color-tertiary-alpha-low: #{color.change($color-tertiary,$alpha:0.8)};
  --theme-color-tertiary-alpha: #{color.change($color-tertiary,$alpha:0.3)};
  --theme-color-tertiary-alpha-high: #{color.change($color-tertiary,$alpha:0.1)};
}

@mixin buildTheme($mq_size_key: null) {

  @include fabric_theme($mq_size_key);
}

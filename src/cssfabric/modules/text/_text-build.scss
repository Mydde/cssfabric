@use 'text-vars';
@use "../cssfabric-vars";
@use '../../_utils';
@use '../../_loader';

// load general config variables
$cssfabric-config: cssfabric-vars.$cssfabric-config;
$sep: map-get($cssfabric-config, sep);

$text-config: text-vars.$text-config;
$moduleName: map-get($text-config, moduleName);
$moduleNameShort: map-get($text-config, moduleNameShort);

$cssProps: map-get($text-config, cssProps);
$color-schemes: map-get($text-config, scheme);
$color-palette-props: map-get($text-config, palette);

$gray-list: map-get($text-config, gray);

$textTransform: map-get($cssProps, textTransform);
$fontWeight: map-get($cssProps, fontWeight);
$textAlign: map-get($cssProps, textAlign);

$title-size-declination-config: map-get($text-config, title-size-declination-config)!default;
$font-size-unit-config: map-get($text-config, font-size-unit-config)!default;
$font-sizes-h1-rem-config: map-get($text-config, font-sizes-h1-rem-config)!default;
$font-size-h-min-rem-config: map-get($text-config, font-size-h-min-rem-config)!default;

$h1-size: $font-sizes-h1-rem-config;
$ratio: $h1-size/$title-size-declination-config;

@mixin fabric_text($tag_short) {

  @for $title-size-value from 1 through $title-size-declination-config {
    //
    $size: $title-size-value * 1;
    $index: $title-size-declination-config - $title-size-value + 1;
    $font-size: $index * $ratio;

    .h#{$size},
    h#{$size} {
      font-size: #{$font-size + $font-size-unit-config};
      line-height: 1.2;
      font-weight: 400;
    }
  }

  .#{$tag_short} {

    @each $fabricRule, $value in $textTransform {
      @include utils.fabricAttributes('&'+$sep, $fabricRule, 'text-transform', $value);
    }

    @each $fabricRule, $value in $fontWeight {
      @include utils.fabricAttributes('&'+$sep, $fabricRule, 'font-weight', $value);
    }

    @each $fabricRule, $value in $textAlign {
      @include utils.fabricAttributes('&'+$sep, $fabricRule, 'text-align', $value);
    }

    @each $fabricRule, $value in $color-schemes {
      @include utils.fabricAttributes('&'+$sep, $fabricRule, 'color', $value);
    }

    @each $fabricRule, $value in $color-palette-props {
      @include utils.fabricAttributes('&'+$sep, $fabricRule, 'color', $value);
    }

    // grays
    @each $fabricRule, $value in $gray-list {
      @include utils.fabricAttributes('&-gray'+$sep, $fabricRule, 'color', $value);
    }

    // text shadows color_schemes
    @each $fabricRule, $value in $color-schemes {
      $cast-value: 0 0 0.125em #{$value};
      @include utils.fabricAttributes('&'+$sep+shad+$sep, $fabricRule, 'text-shadow', $cast-value);
    }

    // text shadows color_palette_props
    @each $fabricRule, $value in $color-palette-props {
      $cast-value: 0 0 0.125em #{$value};
      @include utils.fabricAttributes('&'+$sep+shad+$sep, $fabricRule, 'text-shadow', $cast-value);
    }
  }
}

@mixin buildText($mq_size_key: null) {
  $property_key: if($mq_size_key, #{$moduleNameShort}-#{$mq_size_key}, #{$moduleNameShort});
  /** cssfabric : #{$property_key}*/
  @include fabric_text($property_key);
}

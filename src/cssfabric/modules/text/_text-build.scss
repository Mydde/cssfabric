@use 'text-vars';
@use "../cssfabric-vars";
@use '../../_utils';
@use '../../_loader';

$text-config: text-vars.$text-config;

// load general config variables
$_base: cssfabric-vars.$cssfabric-config;

$text_class_name: map-get($text-config, text_class_name);
$text_class_name_short: map-get($text-config, text_class_name_short);

$color_schemes: map-get($text-config, scheme);
$color_palette_props: map-get($text-config, palette);

$color_grays: loader.getFabricSharedParams(gray-config);

$grays: map-get($color_grays, gray);
$gray_start: map-get($color_grays, start);
$gray_end: map-get($color_grays, end);
$gray_steps: map-get($color_grays, steps);

$font_sizes: map-get($text-config, font_sizes);
$font_sizes_unit: map-get($text-config, font_sizes_unit);
$font_sizes_h1_em: map-get($text-config, font_sizes_h1_em);
$font_sizes_h_min_em: map-get($text-config, font_sizes_h_min_em);

$text_transform: map-get($text-config, text_transform);
$font_weights: map-get($text-config, font_weights);

$text_align: map-get($text-config, text_align);

$scale_props: (
    "width": "w",
    "height": "h"
);
$scale_grid_ratios: (8, 24);

$h1_size: $font_sizes_h1_em;
$ratio: $h1_size/$font_sizes;
$ratio_max_min: $font_sizes_h1_em / $font_sizes_h_min_em;

@mixin fabric_text($tag_short) {
    @for $grid_size_value from 1 through $font_sizes {
        //
        $size: $grid_size_value * 1;
        $index: $font_sizes - $grid_size_value + 1;
        $font_size: $index * $ratio;

        .h#{$size},
        h#{$size} {
            font-size: $font_size + rem;
            line-height: 1.2;
            font-weight: 400;
        }
    }

    .#{$tag_short} {
        @each $transform_key, $transform_prop in $text_transform {
            &-#{$transform_key} {
                text-transform: $transform_prop;
            }
        }

        @each $transform_key, $transform_prop in $font_weights {
            &-#{$transform_key} {
                font-weight: $transform_prop;
            }
        }

        @each $transform_key, $transform_prop in $text_align {
            &-#{$transform_key} {
                text-align: $transform_prop;
            }
        }

        // text color_schemes
        @each $color_key, $color_prop in $color_schemes {
            &#{"-" + $color_key} {
                color: $color_prop;
            }
        }

        // text color_palette_props
        @each $color_palette_key, $color_palette_prop in $color_palette_props {
            &#{"-" + $color_palette_key} {
                color: $color_palette_prop;
            }
        }

        // text shadows color_schemes
        @each $color_key, $color_prop in $color_schemes {
            &#{"-shad-" + $color_key} {
                text-shadow: 0 0 0.125em $color_prop;
            }
        }

        // text shadows color_palette_props
        @each $color_palette_key, $color_palette_prop in $color_palette_props {
            &#{"-shad-" + $color_palette_key} {
                text-shadow: 0 0 0.125em $color_palette_prop;
            }
        }



        @for $i from 1 through $gray_steps {
            &-gray-#{($i+1)*100} {
                color: mix($gray_end, $gray_start, $i / $gray_steps * 100%);
            }
        }
    }
}

@mixin buildText($mq_size_key) {
    $property_key: if($mq_size_key, #{$text_class_name_short}-#{$mq_size_key}, #{$text_class_name_short});
    /** cssfabric : #{$property_key}*/
    @include fabric_text($property_key);
}

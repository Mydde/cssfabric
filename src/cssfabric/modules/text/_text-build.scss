@use 'text-vars';
@use "../cssfabric-config";
@use '../../_utils';
@use "sass:math";

// load general config variables
$cssfabric-config: cssfabric-config.$cssfabric-config;
$sep: map-get($cssfabric-config, sep);

$text-config: text-vars.$text-config;
$moduleName: map-get($text-config, moduleName);
$moduleNameShort: map-get($text-config, moduleNameShort);

$cssProps: map-get($text-config, cssProps);
$color-schemes: map-get($text-config, scheme);
$color-palette-props: map-get($text-config, palette);

$gray-list: map-get($text-config, gray);

$textTransform: map-get($cssProps, textTransform);
$fontWeight: map-get($cssProps, fontWeight);
$textAlign: map-get($cssProps, textAlign);

$font-size-unit-config: map-get($text-config, font-size-unit-config) !default;
$font-size-h-steps: map-get($text-config, title-size-declination-config) !default;
$font-size-h-max-config: map-get($text-config, font-sizes-h1-rem-config) !default;
$font-size-h-min-config: map-get($text-config, font-size-h-min-rem-config) !default;

$size-diff: $font-size-h-max-config - $font-size-h-min-config;
$steps: $font-size-h-steps - 1;

$step-size: math.div($size-diff, $steps);

@mixin fabric_text($tag_short) {

  $acc: 1 - $step-size ;

  .#{$tag_short}-ellipsis {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  @for $size-index from 1 through $font-size-h-steps {
    //
    $acc: (( $font-size-h-steps - $size-index) * $step-size) + 1;

    .h#{$size-index},
    h#{$size-index} {
      font-size: var(--font-size-h#{$size-index});
      line-height: 1.2;
      font-weight: 400;
    }
  }


}

@mixin textBuildTransform($tag_short) {
  .#{$tag_short} {
    @each $fabricRule, $value in $textTransform {
      @include utils.fabricAttributes("&" + $sep, $fabricRule, "text-transform", $value);
    }
  }
}

@mixin textBuildAlign($tag_short) {
  .#{$tag_short} {
    @each $fabricRule, $value in $textAlign {
      @include utils.fabricAttributes("&" + $sep, $fabricRule, "text-align", $value);
    }
  }
}

@mixin textBuildFontWeight($tag_short) {
  .#{$tag_short} {
    @each $fabricRule, $value in $fontWeight {
      @include utils.fabricAttributes("&" + $sep, $fabricRule, "font-weight", var(--font-weight-#{$fabricRule}));
    }
  }
}

@mixin textBuildShadowColorScheme($tag_short) {
  // text shadows color_schemes
  .#{$tag_short} {
    @each $fabricRule, $value in $color-schemes {
      @include utils.fabricAttributes("&" + $sep + shad + $sep, $fabricRule, "text-shadow", var(--text-shadow-#{$fabricRule}));
    }
  }
}

@mixin textBuildShadowPalette($tag_short) {
  // text shadows color_palette_props
  .#{$tag_short} {
    @each $fabricRule, $value in $color-palette-props {
      @include utils.fabricAttributes("&" + $sep+ shad + $sep, $fabricRule, "text-shadow", var(--text-shadow-#{$fabricRule}));
    }
  }
}

@mixin textCssVars() {
  /*Hs*/
  @for $size-index from 1 through $font-size-h-steps {
    $acc: (( $font-size-h-steps - $size-index) * $step-size) + 1;
    --font-size-h#{$size-index}: #{$acc + $font-size-unit-config};
  }
  /*weight*/
  @each $fabricRule, $value in $fontWeight {
    --font-weight-#{$fabricRule}: #{$value};
  }
  /*text shadows color_schemes*/
  @each $fabricRule, $value in $color-schemes {
    $cast-value: 0 0 0.125em #{$value};
    --text-shadow-#{$fabricRule}: #{$cast-value};
  }
  /*text-shadows color_palette */
  @each $fabricRule, $value in $color-palette-props {
    $cast-value: 0 0 0.125em #{$value};
    --text-shadow-#{$fabricRule}: #{$cast-value};
  }
}


@mixin buildText($mq_size_key: null) {

  $property_key: if($mq_size_key, #{$moduleNameShort}-#{$mq_size_key}, #{$moduleNameShort});

  @include fabric_text($property_key);

  @if ($mq_size_key == null) {
    @if (cssfabric-config.$has-text-transform) {
      @include textBuildTransform($property_key)
    }
    @if (cssfabric-config.$has-text-align) {
      @include textBuildAlign($property_key)
    }
    @if (cssfabric-config.$has-text-font) {
      @include textBuildFontWeight($property_key)
    }
    @if (cssfabric-config.$has-text-shadow-color-scheme) {
      @include textBuildShadowColorScheme($property_key)
    }
    @if (cssfabric-config.$has-text-shadow-color-palette) {
      @include textBuildShadowPalette($property_key)
    }
  }

  @if ($mq_size_key != null) {
    @if (cssfabric-config.$has-text-transform-responsive) {
      @include textBuildTransform($property_key)
    }
    @if (cssfabric-config.$has-text-align-responsive) {
      @include textBuildAlign($property_key)
    }
    @if (cssfabric-config.$has-text-font-responsive) {
      @include textBuildFontWeight($property_key)
    }
    @if (cssfabric-config.$has-text-shadow-color-scheme-responsive) {
      @include textBuildShadowColorScheme($property_key)
    }
    @if (cssfabric-config.$has-text-shadow-color-palette-responsive) {
      @include textBuildShadowPalette($property_key)
    }
  }

}

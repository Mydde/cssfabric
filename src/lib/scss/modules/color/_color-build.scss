@use "sass:map";
@use 'color-vars';
@use "sass:math";
// load scss config file
@use '../../_utils';
@use '../cssfabric-config';

$color-config: color-vars.$color-config;

// COLOR TYPES
$color-types-config: map-get($color-config, color-types-config);
// COLOR SCHEMES
$color-schemes: map-get($color-config, scheme) !default;
// COLOR PALETTE
$color-palette: map-get($color-config, palette) !default;
// COLOR THEME 
$color-theme: map-get($color-config, theme) !default;


// GRAYS
$color-gray-start: cssfabric-config.$gray-start !default;
$color-gray-end: cssfabric-config.$gray-end !default;
$color-gray-steps: cssfabric-config.$gray-steps !default;
$gray-schemes: utils.getGraySteps($color-gray-steps, $color-gray-start, $color-gray-end);





@function text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) +  math.div(blue(#ffffff) * 114, 1000));
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + math.div(blue(#ffffff) * 114, 1000));
  $color: black;

  @if abs($color-brightness) < math.div($light-color,2) {
    $color: white;
  }

  @return $color;
}

@mixin buildColorCssVars() {

  /* color-scheme primary secondary tertiary */
  @each $type-key, $type-prop in $color-schemes {
    --color-scheme-#{$type-key} : #{$type-prop};
    --color-scheme-#{$type-key}-light: #{utils.applyColorEffect('light',$type-prop)};
    --color-scheme-#{$type-key}-dark: #{utils.applyColorEffect('dark',$type-prop)};
    @include utils.alphaTize(--color-scheme-#{$type-key}, $type-prop);
  }

  /* color-palette */
  @each $type-key, $type-prop in $color-palette {
    --color-palette-#{$type-key} : #{$type-prop};
    @include utils.alphaTize(--color-palette-#{$type-key}, $type-prop);

    --color-palette-#{$type-key}-lighter: #{utils.applyColorEffect('lighter',$type-prop)};
    --color-palette-#{$type-key}-light: #{utils.applyColorEffect('light',$type-prop)};
    --color-palette-#{$type-key}-dark: #{utils.applyColorEffect('dark',$type-prop)};
    --color-palette-#{$type-key}-darker: #{utils.applyColorEffect('darker',$type-prop)};

    --color-palette-#{$type-key}-complement: #{utils.applyColorEffect('complement',$type-prop)};
    @include utils.alphaTize(--color-palette-#{$type-key}-complement, utils.applyColorEffect('complement', $type-prop));

    --color-palette-#{$type-key}-invert: #{utils.applyColorEffect('invert',$type-prop)};
    @include utils.alphaTize(--color-palette-#{$type-key}-invert, utils.applyColorEffect('invert', $type-prop));
    // backdrop-filter: blur(5px);
  }

  /* grays */
  @each $type-key, $type-prop in $gray-schemes {
    --color-gray-#{$type-key} : #{$type-prop};
    @include utils.alphaTize(--color-gray-#{$type-key}, $type-prop);
  }
}

@mixin colorFactory($tag_short, $color_prop) {
  $switch-tag_short: utils.getColorPropertyType($tag_short);

  @each $colorTint in (light lighter dark darker complement invert) {

    $newColor: utils.applyColorEffect($colorTint, $color_prop);

    &-#{$colorTint} {
      @if $tag_short== "bg-themed" {
        color: text-contrast($newColor);
      }
      #{$switch-tag_short}: $newColor;
    }
  }
}

@mixin fabricColors($color-type,$color-type-list, $color-type-key, $mq-key, $has-color-factory:null) {

  $switch-tag_short: utils.getColorPropertyType($color-type-key);

  $prop: "";

  $property_key: #{$color-type-key}-#{$color-type} + if($mq-key, -#{$mq-key}, "");


  .#{$property_key} {
    @each $type-key, $type-prop in $color-type-list {
      &#{"-" + $type-key} {

        // border-color: ;
        @if $color-type-key==border-color {
          border-color: utils.applyColorEffect('dark', $type-prop) !important;
        }

        @if $color-type-key==foreground {
          color: $type-prop;
          @if $has-color-factory {
            @include colorFactory($color-type-key, $type-prop);
          }
        }

        @if $color-type-key==bg {
          background-color: $type-prop;
          @if $has-color-factory {
            @include colorFactory($color-type-key, $type-prop);
          }
        }

        @if $color-type-key == "bg-themed" {
          color: text-contrast($type-prop);
          text-shadow: 0 0 0.125rem utils.applyColorEffect("dark", $type-prop);
          background-color: $type-prop;
          @if $has-color-factory {
            @include colorFactory($color-type-key, $type-prop);
          }
        }
      }
    }
  }
}

@mixin buildColor($mq_size_key:null) {
  // "foreground"  ,
  // "bg",
  // "bg-themed",
  // "border-color"

  // $has-color-palette
  @if ((cssfabric-config.$has-color-palette==true) or ($mq_size_key!=null and cssfabric-config.$has-color-palette-responsive==true)) {
    // $has-color-foreground
    @if (cssfabric-config.$has-color-foreground) {
      @include fabricColors("palette", $color-palette, foreground, $mq_size_key, true);
    }
    // $has-color-bg
    @if (cssfabric-config.$has-color-bg) {
      @include fabricColors("palette", $color-palette, bg, $mq_size_key, true);
    }
    // $has-color-bg-themed
    @if (cssfabric-config.$has-color-bg-themed) {
      @include fabricColors("palette", $color-palette, bg-themed, $mq_size_key, true);
    }
    // $has-color-border
    @if (cssfabric-config.$has-color-border) {
      @include fabricColors("palette", $color-palette, border-color, $mq_size_key, true);
    }
  }

  // $has-color-scheme
  @if ((cssfabric-config.$has-color-scheme==true) or ($mq_size_key!=null and cssfabric-config.$has-color-scheme-responsive==true)) {
    @if (cssfabric-config.$has-color-foreground) {
      @include fabricColors("scheme", $color-schemes, foreground, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-bg) {
      @include fabricColors("scheme", $color-schemes, bg, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-bg-themed) {
      @include fabricColors("palette", $color-schemes, bg-themed, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-border) {
      @include fabricColors("scheme", $color-schemes, border-color, $mq_size_key);
    }
  }

  // $has-color-gray
  @if ((cssfabric-config.$has-color-gray==true) or ($mq_size_key!=null and cssfabric-config.$has-color-gray-responsive==true)) {
    @if (cssfabric-config.$has-color-foreground) {
      @include fabricColors("grey", $gray-schemes, foreground, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-bg) {
      @include fabricColors("grey", $gray-schemes, bg, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-bg-themed) {
      @include fabricColors("palette", $gray-schemes, bg-themed, $mq_size_key, true);
    }
    @if (cssfabric-config.$has-color-border) {
      @include fabricColors("grey", $gray-schemes, border-color, $mq_size_key);
    }
  }

}
